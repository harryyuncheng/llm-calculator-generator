# LLM-Powered Calculator: Complete Python Application

## Project Objective
Build a modern GUI calculator application that uses Claude AI to perform mathematical calculations, combining traditional calculator interface with AI-powered computation.

## Technical Requirements (Non-Negotiable)

### Core Stack
- GUI Framework: Python tkinter (built-in, no external GUI libraries)
- AI Integration: Anthropic Claude API via `anthropic` library
- Python Version: 3.8+ (for modern async support and typing)
- Architecture: Single-class design with clean separation of concerns

### Security & Configuration
- MUST load API credentials from `.env` file using python-dotenv
- MUST validate API key on application startup
- MUST never hardcode credentials in source code
- MUST gracefully handle missing or invalid API configuration

### Error Handling Requirements
- Network timeouts (5-second default)
- Invalid API responses or parsing failures
- Malformed mathematical expressions
- API rate limiting and quota exceeded scenarios
- Keyboard interrupt during API calls

## Implementation Specifications

### File Structure
```
calculator-app/
├── calculator.py          # Main application class
├── run.py                # Setup and launcher script
└── requirements.txt      # Dependencies
```
DO NOT create any other files. Assume that there is a venv, .env, and .gitignore already generated.

### 1. Main Application (`calculator.py`)

Class Structure:
```python
class LLMCalculator:
    def __init__(self):
        # Window setup, API client initialization
        # State management, UI component creation
        
    def load_environment(self) -> bool:
        # Load and validate .env configuration
        # Return success/failure for startup validation
        
    def setup_ui(self):
        # Create all GUI components
        # Configure styling and layout
        
    def handle_button_click(self, value: str):
        # Process calculator button inputs
        # Update display and manage state
        
    async def calculate_with_claude(self, expression: str) -> str:
        # Send expression to Claude API
        # Log the expression being sent to the LLM
        # Parse and return numerical result
        
    def update_display(self, text: str):
        # Update calculator display
        # Handle text formatting and alignment
```

Required Features:
- Expression Display: Show current mathematical expression being built
- Result Display: Show calculated results clearly separated from input
- Button Grid: Standard calculator layout (0-9, +, -, *, /, =, C, .)
- Loading States: Visual feedback during API calls (disabled buttons, loading indicator)
- Keyboard Support: Allow typing expressions directly
- State Management: Track current expression, last result, calculation state

#### Visual & Logging Requirements
- **All text in the application must be black and properly centered.**
- **All calculator buttons must be grey.**
- **There must be logs whenever the LLM is called to calculate an expression.**

### 2. Launcher Script (`run.py`)

Required Functions:
```python
def check_python_version():
    # Validate Python 3.8+ requirement
    
def install_dependencies():
    # Install from requirements.txt with progress feedback
    
def validate_environment():
    # Check for .env file and API key configuration
    
def launch_application():
    # Start the calculator with error handling
    
if __name__ == "__main__":
    # Orchestrate setup and launch sequence
```

### 3. Dependencies (`requirements.txt`)
```
anthropic>=0.7.0
python-dotenv>=0.19.0
# tkinter is built into Python standard library
```

## API Integration Specifications

### Claude Communication Protocol
- Prompt Format: "Calculate the following mathematical expression and return only the numerical result: {expression}"
- Model Selection: Use `claude-3-haiku-20240307` for fast, cost-effective calculations
- Response Parsing: Extract numerical result using regex pattern `r'[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?'`
- Error Recovery: Fallback to basic Python `eval()` for simple expressions if API fails

### API Configuration Requirements
```env (already generated, just giving you the template)
ANTHROPIC_API_KEY=your_api_key_here
CLAUDE_MODEL=claude-3-haiku-20240307
API_TIMEOUT=5
MAX_TOKENS=100
```

## User Experience Requirements

### Input Validation
- MUST accept only valid mathematical characters: `0-9`, `+`, `-`, `*`, `/`, `.`, `(`, `)`
- MUST prevent multiple consecutive operators
- MUST validate parentheses balancing before sending to API
- SHOULD highlight syntax errors in real-time

### Interaction Design
- Button States: Clear visual feedback for hover, active, and disabled states
- Keyboard Shortcuts: Enter for calculate, Escape for clear, Backspace for delete
- Loading Feedback: Progress indicator and disabled UI during API calls
- Error Messages: User-friendly error dialogs (not console errors)

### Accessibility Considerations
- MUST support keyboard navigation between all buttons
- SHOULD use high-contrast colors for readability
- SHOULD provide clear focus indicators

## Creative Freedom Areas

You have complete creative control over:

### Visual Design
- Color Schemes: All text must be black. All buttons must be grey.
- Typography: Select appropriate fonts for display and buttons
- Layout Style: Grid arrangement, button sizes, spacing, borders
- Visual Effects: Subtle animations, hover effects, button press feedback

### Code Organization
- Design Patterns: Choose appropriate patterns for state management
- Error Handling Strategy: Decide between exceptions vs return codes
- Async Implementation: Choose between asyncio or threading for API calls
- Configuration Management: Extend beyond basic .env if desired

## Success Criteria

### Functional Requirements
1. Calculator Operations: All basic math operations work correctly
2. API Integration: Successfully communicates with Claude API
3. Error Resilience: Gracefully handles network issues and invalid inputs
4. User Experience: Smooth, responsive interface with clear feedback
5. Setup Process: One-command installation and configuration

### Performance Benchmarks
- Response Time: API calculations complete within 5 seconds
- UI Responsiveness: No blocking during API calls
- Memory Usage: Stable memory consumption during extended use
- Startup Time: Application launches within 2 seconds

### Quality Standards
- Code Quality: Clean, readable, well-documented code
- Error Messages: Clear, actionable user feedback
- Edge Cases: Handles division by zero, overflow, malformed expressions
- Professional Appearance: Polished, modern GUI design

## Deliverables

1. Working Application: Complete calculator with all required features
2. Setup Documentation: Clear installation and configuration instructions
3. Code Documentation: Inline comments and docstrings for key functions
4. Configuration Template: `.env.example` file with all required variables
5. Error Handling: Comprehensive error scenarios covered
